# üöó Sistema de Gest√£o de Reservas de Ve√≠culos (ABAP)

Este projeto consiste em um sistema completo e simples de gest√£o de reservas de ve√≠culos, desenvolvido em ABAP com foco em Orienta√ß√£o a Objetos. Criado como um projeto de portf√≥lio, ele demonstra funcionalidades essenciais de um sistema transacional SAP, incluindo autentica√ß√£o de usu√°rios, gest√£o de cadastros (usu√°rios e ve√≠culos), cria√ß√£o e consulta de reservas, e an√°lises de dados apresentadas em relat√≥rios ALV.

---

## üéØ Funcionalidades Principais

O sistema gerencia usu√°rios, ve√≠culos e reservas, cobrindo:

* **Autentica√ß√£o**: Login de usu√°rios (administrador/comum).
* **Cadastros**: Gest√£o de usu√°rios e ve√≠culos.
* **Reservas**: Cria√ß√£o e consulta de reservas.
* **An√°lise**: Relat√≥rios de lucro e estat√≠sticas de reservas.

---

## ‚öôÔ∏è Como Funciona?

A aplica√ß√£o √© modular, com programas ABAP e classes locais que encapsulam a l√≥gica de neg√≥cio e opera√ß√µes de banco de dados.

### Componentes Essenciais:

#### 1. Tabelas Customizadas (Z-tables)

Criadas via SE11, armazenam os dados do sistema. √â fundamental que os campos sejam criados com os nomes, tipos e comprimentos exatos para que os programas funcionem corretamente.

##### ZUSUARIOS: Armazena informa√ß√µes dos usu√°rios do sistema.

**Estrutura da Tabela:**

* `ID_USUARIO` (Tipo: NUMC, Comprimento: 5, Chave Prim√°ria)
* `NOME` (Tipo: CHAR, Comprimento: 50)
* `LOGIN` (Tipo: CHAR, Comprimento: 20)
* `SENHA` (Tipo: CHAR, Comprimento: 20)
* `PERFIL` (Tipo: CHAR, Comprimento: 1) - Valores esperados: 'A' (Administrador), 'U' (Usu√°rio Comum)

##### ZVEICULOS: Armazena informa√ß√µes dos ve√≠culos dispon√≠veis para aluguel.

**Estrutura da Tabela:**

* `ID_VEICULO` (Tipo: NUMC, Comprimento: 5, Chave Prim√°ria)
* `MODELO` (Tipo: CHAR, Comprimento: 50)
* `PLACA` (Tipo: CHAR, Comprimento: 7, Chave √önica)
* `STATUS` (Tipo: CHAR, Comprimento: 1) - Valores esperados: 'D' (Dispon√≠vel), 'I' (Indispon√≠vel)
* `VALOR_DIA` (Tipo: CURR, Comprimento: 11, Casas Decimais: 2)

##### ZRESERVAS: Armazena os detalhes das reservas de ve√≠culos.

**Estrutura da Tabela:**

* `ID_RESERVA` (Tipo: NUMC, Comprimento: 10, Chave Prim√°ria)
* `ID_USUARIO` (Tipo: NUMC, Comprimento: 5, Chave Estrangeira para ZUSUARIOS)
* `ID_VEICULO` (Tipo: NUMC, Comprimento: 5, Chave Estrangeira para ZVEICULOS)
* `DATA_INICIO` (Tipo: DATS)
* `DATA_FIM` (Tipo: DATS)
* `VALOR_TOTAL` (Tipo: CURR, Comprimento: 15, Casas Decimais: 2)
* `STATUS` (Tipo: CHAR, Comprimento: 1) - Valores esperados: 'A' (Ativa), 'F' (Finalizada), 'C' (Cancelada)

#### 2. Programas ABAP

Criados via SE38, cada um com uma fun√ß√£o espec√≠fica:

* `ZLOGIN`: Ponto de entrada para autentica√ß√£o.
* `ZMENUS`: Menu principal, acesso por perfil.
* `ZCAD_USUARIO`: Cadastro de usu√°rios.
* `ZCAD_VEICULO`: Cadastro de ve√≠culos.
* `ZRESERVAR_VEICULO`: Cria√ß√£o de reservas.
* `ZCONSULT_RESERVA`: Consulta de reservas (com filtro e op√ß√£o "todas").
* `ZREL_LUCRO`: Relat√≥rio de lucro/dashboard.
* `ZPOPULAR`: Programa utilit√°rio essencial para popular dados de teste.

---

## ‚ú® Aspectos Relevantes para Avaliadores

Este projeto, embora simples, demonstra uma s√©rie de boas pr√°ticas e habilidades essenciais no desenvolvimento ABAP:

* **Orienta√ß√£o a Objetos (POO)**: Utiliza√ß√£o de classes locais (`zcl_consult_reserva`, `zcl_usuario`, `lcl_relatorio_lucro`) com m√©todos bem definidos para encapsular a l√≥gica de neg√≥cio, promover a modularidade e a reutiliza√ß√£o de c√≥digo (`set_parametros`, `carregar_dados`, `gerar_id`, `criar_usuario`, etc.).
* **Manipula√ß√£o de Dados (DML)**: Opera√ß√µes b√°sicas e avan√ßadas de banco de dados (`INSERT`, `DELETE`, `SELECT`) com tabelas customizadas.
* **Consultas SQL Din√¢micas**: Exemplo de `SELECT` com `WHERE` din√¢mico (`lt_condicoes_where`) em `ZCONSULT_RESERVA_OO`.
* **Relat√≥rios ALV**: Uso de `REUSE_ALV_GRID_DISPLAY` com constru√ß√£o din√¢mica do cat√°logo de campos.
* **Valida√ß√µes e Tratamento de Erros**:
  * Valida√ß√£o de datas (`p_dt_ini > p_dt_fim`)
  * Verifica√ß√£o de logins duplicados (`verificar_login`)
  * Tratamento de divis√£o por zero em c√°lculos (`ticket_medio`, `taxa_cancelamento_pct`)
  * Uso de mensagens (`MESSAGE TYPE 'E'`, `'I'`, `'S'`)
* **Tratamento de Dados de Entrada**: Uso de `CONDENSE` em `ZPOPULAR_COMPLETO` para limpar espa√ßos em branco.
* **Gera√ß√£o de IDs Sequenciais**: N√∫meros sequenciais com preenchimento zero √† esquerda (`NUMC`).
* **Modulariza√ß√£o e Reutiliza√ß√£o**: Uso de `FORM` e m√©todos como `inserir_reserva_detalhada`.
* **Intera√ß√£o com Tela de Sele√ß√£o**: Uso de `PARAMETERS` e `RADIOBUTTON GROUP` para interfaces intuitivas.

---

## üöÄ Como Usar o Projeto? (Guia R√°pido)

### Configura√ß√£o Inicial:

* Crie as tabelas Z (SE11) com os campos exatos.
* Crie os programas ABAP (SE38) e ative-os.
* Crie os **Text Elements** (SE38 ‚Üí GOTO ‚Üí Text Elements ‚Üí Text Symbols).

### Preparar Dados:

* Execute o programa `ZPOPULAR` (SE38, F8) para limpar e popular as tabelas com dados de teste.

### Iniciar o Sistema:

* Execute o programa `ZLOGIN` (SE38, F8).
* Use as credenciais de teste:

  * **Administrador**: Login `ADM`, Senha `1111`
  * **Usu√°rio Comum**: Login `USR`, Senha `2222`

### Navegar:

* Ap√≥s o login, explore as funcionalidades atrav√©s do menu principal (`ZMENUS`).

## üë®‚Äçüíª Autor

**Mateus Oliveira**
